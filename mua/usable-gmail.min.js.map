{"version":3,"file":"usable-gmail.min.js","sources":["lib/models.js","stores/gapi.js","lib/client-id.js","lib/scopes.js","stores/user.js","stores/is-logged-in.js","stores/gmail-labels.js","node_modules/lit-html/lib/dom.js","node_modules/lit-html/lib/template.js","node_modules/lit-html/lib/modify-template.js","node_modules/lit-html/lib/directive.js","node_modules/lit-html/lib/part.js","node_modules/lit-html/lib/template-instance.js","node_modules/lit-html/lib/template-result.js","node_modules/lit-html/lib/parts.js","node_modules/lit-html/lib/template-factory.js","node_modules/lit-html/lib/render.js","node_modules/lit-html/lib/default-template-processor.js","node_modules/lit-html/lit-html.js","node_modules/lit-html/lib/shady-render.js","node_modules/lit-element/lib/updating-element.js","node_modules/lit-element/lib/css-tag.js","node_modules/lit-element/lit-element.js","elements/rb-usable.js","elements/usbl-top-bar.js","elements/usbl-mailboxes.js","elements/usbl-messages.js","elements/usbl-message-view.js","elements/usbl-logout-button.js"],"sourcesContent":["/* eslint eqeqeq: 0, no-self-compare: 0, no-bitwise: 0 */\n// XXX: this is copied from anti on 2020-08-03\n\nlet registry = {}\n  , subscriberQueue = []\n;\n\nexport function registerStore (name, store) {\n  if (registry[name]) throw new Error(`Store \"${name}\" already registered.`);\n  registry[name] = store;\n}\n\nexport function getStore (name) {\n  if (!registry[name]) throw new Error(`Store \"${name}\" not found.`);\n  return registry[name];\n}\n\nexport function getStoreName (store) {\n  return Object.keys(registry).find(n => registry[n] === store);\n}\n\n// Creates a store that can fetch from HTTP.\n// The value this store captures is from an HTTP result. It is structured thus:\n//  - state:\n//  - error: error message, if any\n//  - errorCode: error code, if any\n//  - value: the value returned\n// This API expects the server to send back some JSON, with the following structure:\n//  - ok: true | false\n//  - error and errorCode: as above\n//  - data: the value\nexport function fetchable (url, value = {}) {\n  if (!value.state) value.state = 'unknown';\n  let load = (set) => {\n        let xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', () => {\n          try {\n            let { ok, error, errorCode, data } = xhr.responseText\n              ? JSON.parse(xhr.responseText)\n              : {}\n            ;\n            if (xhr.status < 400) return set({ state: ok ? 'loaded' : 'error', error, errorCode, data });\n            return set({ state: 'error', error: error || xhr.statusText, errorCode: errorCode || xhr.status });\n          }\n          catch (err) {\n            return set({ state: 'error', error: err.message || err.toString(), errorCode: 'exception' });\n          }\n        });\n        xhr.addEventListener('error', () => {\n          set({ state: 'error', error: 'Network-level error', errorCode: 'network' });\n        });\n        xhr.addEventListener('progress', (evt) => {\n          let { lengthComputable, loaded, total } = evt;\n          set({ state: 'loading', lengthComputable, loaded, total });\n        });\n        xhr.open('GET', url);\n        set({ state: 'loading', lengthComputable: false, loaded: 0, total: 0 });\n        xhr.send();\n        // this will only actually stop anyting if it's really long\n        return () => xhr.abort();\n      }\n    , { subscribe, set } = writable(value, load)\n    , reload = () => {\n        set({ state: 'unknown' });\n        return load(set);\n      }\n  ;\n  return { subscribe, reload };\n}\n\n// --- What follows is largely taken from Svelte (https://svelte.dev/docs#readable). Thanks Rich!\n\n// Creates a read-only store.\n//  - `value` is the initial value, which may be null/undefined.\n//  - `start` is a function that gets called when the first subscriber subscribes. It receives a\n//    `set` function which should be called with the new value whenever it is updated. It must also\n//    return a `stop` function that will get called when the last subscriber unsubscribes.\n// Returns an object with .subscribe(cb) exposed as an API, where `cb` will received the value when\n// it changes. This method returns a function to call to unsubscribe.\nexport function readable (value, start) {\n  return { subscribe: writable(value, start).subscribe };\n}\n\n// Creates a regular read/write store.\n// The parameters are the same as for `readable` except that `start` is optional because you can\n// write to the value through the API.\n// It returns an object with:\n//  - .subscribe(cb), which is the same as for readable()\n//  - .set(val) which sets the store's value directly\n//  - .update(updater) which gets a function that receives the value and returns it updated\nexport function writable (value, start = () => {}) {\n  let stop\n    , subs = []\n    , set = (newValue) => {\n        if (safeNotEqual(value, newValue)) {\n          value = newValue;\n          if (stop) { // store is ready\n            let runQueue = !subscriberQueue.length;\n            subs.forEach(s => {\n              s[1]();\n              subscriberQueue.push(s, value);\n            });\n            if (runQueue) {\n              for (let i = 0; i < subscriberQueue.length; i += 2) {\n                subscriberQueue[i][0](subscriberQueue[i + 1]);\n              }\n              subscriberQueue.length = 0;\n            }\n          }\n        }\n      }\n    , update = (fn) => set(fn(value))\n    , subscribe = (run, invalidate = () => {}) => {\n        let subscriber = [run, invalidate];\n        subs.push(subscriber);\n        if (subs.length === 1) stop = start(set) || (() => {});\n        run(value);\n        return () => {\n          let index = subs.indexOf(subscriber);\n          if (index !== -1) subs.splice(index, 1);\n          if (subs.length === 0) {\n            stop();\n            stop = null;\n          }\n        };\n      }\n  ;\n  return { set, update, subscribe };\n}\n\n// derived stores\nexport function derived (stores, fn, initialValue) {\n    let single = !Array.isArray(stores)\n      , storesArray = single ? [stores] : stores\n      , auto = fn.length < 2\n    ;\n    return readable(initialValue, (set) => {\n        let inited = false\n          , values = []\n          , pending = 0\n          , cleanup = () => {}\n          , sync = () => {\n              if (pending) return;\n              cleanup();\n              let result = fn(single ? values[0] : values, set);\n              if (auto) set(result);\n              else cleanup = isFunction(result) ? result : () => {};\n            }\n          , unsubscribers = storesArray.map((store, i) => subMany(store, (value) => {\n              values[i] = value;\n              pending &= ~(1 << i);\n              if (inited) sync();\n            }, () => pending |= (1 << i)));\n        inited = true;\n        sync();\n        return function stop() {\n          runAll(unsubscribers);\n          cleanup();\n        };\n    });\n}\n\n// Reads a store once\nexport function get (store) {\n  if (!store) return;\n  let value;\n  store.subscribe(v => value = v)();\n  return value;\n}\n\n// Equality function stolen from Svelte\nfunction safeNotEqual (a, b) {\n  return a != a ? b == b : a !== b ||\n    (\n      (a && typeof a === 'object') ||\n      typeof a === 'function'\n    );\n}\n\nfunction runAll (fns) {\n  fns.forEach(fn => fn());\n}\n\nfunction isFunction (thing) {\n  return typeof thing === 'function';\n}\n\nfunction subMany (store, ...callbacks) {\n  if (store == null) return () => {};\n  let unsub = store.subscribe(...callbacks);\n  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n","/* global gapi */\n\nimport { registerStore, writable } from '../lib/models';\nimport clientID from '../lib/client-id';\nimport scope from '../lib/scopes';\n\nlet gapiStore = writable(\n  null,\n  (set) => {\n    gapi.load('client:auth2', () => {\n      gapi.client.init({\n          client_id: clientID,\n          discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest'],\n          scope,\n          ux_mode: 'redirect',\n        })\n        .then(() => set(gapi))\n        .catch((err) => {\n          console.error(err);\n          set(null);\n        })\n      ;\n    });\n  }\n);\nregisterStore('gapi', gapiStore);\n","\nconst clientID = '564300876279-vduinvjp384lvuusnhtfbgjut1ker4fa.apps.googleusercontent.com';\nexport default clientID;\n","\nconst scopes = 'profile https://mail.google.com/';\nexport default scopes;\n","\nimport { registerStore, getStore, derived } from '../lib/models';\n\nlet auth2\n  , userStore = derived(\n      getStore('gapi'),\n      (gapi, set) => {\n        if (!gapi) return set(null);\n        auth2 = gapi.auth2.getAuthInstance();\n        auth2.isSignedIn.listen((signedIn) => {\n          if (!signedIn) auth2.signIn();\n        });\n        if (!auth2.isSignedIn.get()) auth2.signIn();\n        auth2.currentUser.listen((user) => set(user));\n        set(auth2.currentUser.get());\n      }\n    )\n;\nuserStore.logout = () => {\n  if (!auth2) return;\n  auth2.signOut();\n};\nregisterStore('user', userStore);\n","\nimport { registerStore, getStore, derived } from '../lib/models';\n\nlet loggedInStore = derived(getStore('user'), (user) => user && user.isSignedIn(), false);\nregisterStore('is-logged-in', loggedInStore);\n","\nimport { registerStore, getStore, derived } from '../lib/models';\n\nlet gmailLabelStore = derived(\n  [getStore('gapi'), getStore('is-logged-in')],\n  ([gapi, isLoggedIn], set) => {\n    if (!gapi || !isLoggedIn) return set([]);\n    gapi.client.gmail.users.labels.list({ userId: 'me' })\n      .then((res) => {\n        let { labels } = res.result;\n        labels = labels\n          .filter(lb => lb.labelListVisibility !== 'labelHide' && lb.id !== 'UNREAD')\n          .sort((a, b) => {\n            if (a.type === 'system' && b.type !== 'system') return -1;\n            if (a.type !== 'system' && b.type === 'system') return 1;\n            if (a.type === 'system' && a.id === 'INBOX') return -1;\n            if (b.type === 'system' && b.id === 'INBOX') return 1;\n            return a.name.localeCompare(b.name);\n          })\n          .map(lb => {\n            if (lb.type !== 'system') return lb;\n            return (\n              { ...lb, name: lb.name.charAt(0).toUpperCase() + lb.name.slice(1).toLowerCase() }\n            );\n          })\n        ;\n        set(labels || []);\n      })\n      .catch((err) => {\n        console.error(err);\n        set([]);\n      })\n    ;\n  },\n  []\n);\nregisterStore('gmail-labels', gmailLabelStore);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        // Initialize to an unresolved Promise so we can make sure the element has\n        // connected before first update.\n        this._updatePromise = new Promise((res) => this._enableUpdatingResolver = res);\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, _options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (userStyles === undefined) {\n            this._styles = [];\n        }\n        else if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = [userStyles];\n        }\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's NodePart - typically a TemplateResult.\n     * Setting properties inside this method will *not* trigger the element to\n     * update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the value to the element's DOM.\n * @param result The value to render.\n * @param container Node into which to render.\n * @param options Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","\nimport { LitElement, css, html } from 'lit-element';\nimport { getStore } from '../lib/models';\n\nclass RBUsableELement extends LitElement {\n  static get properties () {\n    return ({\n      loggedIn: { atttribute: false },\n    });\n  }\n  initialize () {\n    super.initialize();\n    this.loggedInStore = getStore('is-logged-in');\n    this.loggedInStore.subscribe((isLoggedIn) => this.loggedIn = isLoggedIn);\n  }\n  static get styles () {\n    return css`\n      :host {\n        display: grid;\n        grid-template:\n          \"bar bar\" 40px\n          \"mbx mlist\" 1fr\n          \"mbx msg\" 2fr / 200px 1fr\n        ;\n        height: 100vh;\n      }\n      .loading {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        color: var(--highlight);\n        background: #333;\n        font-family: karnak-cond-normal-700;\n        font-size: 1.5rem;\n      }\n      .loading img {\n        margin-right: 5px;\n      }\n    `;\n  }\n  render () {\n    if (!this.loggedIn) {\n      return html`\n        <div class=\"loading\">\n          <img src=\"/img/bird.svg\" width=\"36\" height=\"36\" alt=\"Usable Gmail Logo\">\n          <span>Loading…</span>\n        </div>`;\n    }\n    return html`\n      <usbl-top-bar></usbl-top-bar>\n      <usbl-mailboxes></usbl-mailboxes>\n      <usbl-messages></usbl-messages>\n      <usbl-message-view></usbl-message-view>\n    `;\n  }\n}\ncustomElements.define('rb-usable', RBUsableELement);\n","\nimport { LitElement, css, html } from 'lit-element';\nimport { getStore } from '../lib/models';\n\nclass UsableTopBarELement extends LitElement {\n  static get properties () {\n    return ({\n      picture: { atttribute: false },\n      givenName: { atttribute: false },\n    });\n  }\n  initialize () {\n    super.initialize();\n    this.userStore = getStore('user');\n    this.userStore.subscribe((user) => {\n      let picture\n        , givenName\n      ;\n      if (user) {\n        let profile = user.getBasicProfile();\n        if (profile) {\n          picture = profile.getImageUrl();\n          givenName = profile.getGivenName();\n        }\n      }\n      this.picture = picture;\n      this.givenName = givenName;\n    });\n  }\n  static get styles () {\n    return css`\n      :host {\n        grid-area: bar;\n        display: flex;\n        justify-content: space-between;\n        padding: 2px;\n        border-bottom: 1px solid #e2e2e2;\n      }\n      .logo-name {\n        display: flex;\n      }\n      .logo-name > img {\n        margin: 5px 0 5px 5px;\n        height: 30px;\n      }\n      .logo-name > .name {\n        border-left: 1px solid hotpink;\n        line-height: 0.6;\n        display: inline-block;\n        padding: 6px 3px 3px 3px;\n        font-family: karnak-normal-700, karnak-cond-normal-700;\n        color: var(--highlight);\n        font-size: 1.5rem;\n        height: 16px;\n        margin-top: 7px;\n      }\n      .user-bar > img {\n        vertical-align: middle;\n      }\n    `;\n  }\n  render () {\n    return html`\n      <span class=\"logo-name\">\n        <img src=\"/img/bird.svg\" width=\"36\" height=\"36\" alt=\"Usable Gmail Logo\">\n        <span class=\"name\">Usable</span>\n      </span>\n      ${\n        (this.picture && this.givenName)\n          ? html`\n            <span class=\"user-bar\">\n              <usbl-logout-button></usbl-logout-button>\n              <img src=${this.picture} width=\"36\" height=\"36\" alt=${this.givenName}>\n            </span>\n          `\n          : html``\n      }\n    `;\n  }\n}\ncustomElements.define('usbl-top-bar', UsableTopBarELement);\n","\nimport { LitElement, css, html } from 'lit-element';\nimport { getStore } from '../lib/models';\n\nclass UsableMailboxesELement extends LitElement {\n  static get properties () {\n    return ({\n      labels: { atttribute: false },\n    });\n  }\n  initialize () {\n    super.initialize();\n    this.labelsStore = getStore('gmail-labels');\n    this.labelsStore.subscribe((labels) => {\n      this.labels = labels;\n    });\n  }\n  static get styles () {\n    return css`\n      :host {\n        grid-area: mbx;\n        overflow: auto;\n        font-family: franklin;\n        border-right: 1px solid #e2e2e2;\n      }\n      a {\n        text-decoration: none;\n        color: #333;\n        display: block;\n      }\n      .icon {\n        display: inline-block;\n        margin-right: 0.2rem;\n      }\n      ul {\n        list-style-type: none;\n        padding-left: 0.8rem;\n      }\n    `;\n  }\n  render () {\n    return html`\n      <ul>\n        ${this.labels.map(({ id, name }) => html`\n          <li><a href=${`#${id}`}>${getIcon(id)} ${name}</a></li>\n        `)}\n      </ul>\n    `;\n  }\n}\ncustomElements.define('usbl-mailboxes', UsableMailboxesELement);\n\nlet icons = {\n  INBOX: '📥',\n  DRAFT: '📝',\n  SENT: '📤',\n  SPAM: '🥫',\n  TRASH: '🗑',\n};\nfunction getIcon (id) {\n  return html`<span class=\"icon\">${icons[id] || '📁'}</span>`;\n}\n","\nimport { LitElement, css, html } from 'lit-element';\n\nclass UsableMessagesELement extends LitElement {\n  static get styles () {\n    return css`\n      :host {\n        background: cornflowerblue;\n        opacity: 0.2;\n        grid-area: mlist;\n      }\n    `;\n  }\n  render () {\n    return html`\n      <span>messages</span>\n    `;\n  }\n}\ncustomElements.define('usbl-messages', UsableMessagesELement);\n","\nimport { LitElement, css, html } from 'lit-element';\n\nclass UsableMessageViewELement extends LitElement {\n  static get styles () {\n    return css`\n      :host {\n        background: lime;\n        opacity: 0.2;\n        grid-area: msg;\n      }\n    `;\n  }\n  render () {\n    return html`\n      <span>message view</span>\n    `;\n  }\n}\ncustomElements.define('usbl-message-view', UsableMessageViewELement);\n","\nimport { LitElement, css, html } from 'lit-element';\nimport { getStore } from '../lib/models';\n\nclass UsableLogoutButtonELement extends LitElement {\n  initialize () {\n    super.initialize();\n    this.userStore = getStore('user');\n  }\n  static get styles () {\n    return css`\n    `;\n  }\n  handleLogOut () {\n    console.warn(`logging out`, this, this.userStore);\n    if (!this.userStore) return;\n    this.userStore.logout();\n  }\n  render () {\n    return html`\n      <button type=\"button\" class=\"logout\" @click=${this.handleLogOut}>Log Out</button>\n    `;\n  }\n}\ncustomElements.define('usbl-logout-button', UsableLogoutButtonELement);\n"],"names":["registry","subscriberQueue","registerStore","name","store","Error","getStore","writable","value","start","stop","subs","set","newValue","b","a","runQueue","length","forEach","s","push","i","update","fn","subscribe","run","invalidate","subscriber","index","indexOf","splice","derived","stores","initialValue","single","Array","isArray","storesArray","auto","inited","values","pending","cleanup","sync","result","unsubscribers","map","callbacks","unsub","unsubscribe","subMany","gapi","load","client","init","client_id","discoveryDocs","ux_mode","then","catch","err","console","error","auth2","userStore","getAuthInstance","isSignedIn","listen","signedIn","signIn","get","currentUser","user","logout","signOut","isLoggedIn","gmail","users","labels","list","userId","res","filter","lb","labelListVisibility","id","sort","type","localeCompare","charAt","toUpperCase","slice","toLowerCase","isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","removeNodes","container","end","n","nextSibling","removeChild","marker","String","Math","random","nodeMarker","markerRegex","RegExp","Template","[object Object]","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","partIndex","strings","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","attributeValue","getAttribute","removeAttribute","statics","split","tagName","currentNode","data","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","removeNodesFromTemplate","template","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","has","countNodes","startIndex","directives","WeakMap","isDirective","o","noChange","nothing","TemplateInstance","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","isIterable","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","PropertyCommitter","super","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","templateCache","templateCaches","stringsArray","keyString","Map","key","join","getTemplateElement","defaultTemplateProcessor","prefix","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","Promise","_enableUpdatingResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","descriptor","getPropertyDescriptor","defineProperty","_options","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","enableUpdating","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","getPropertyOptions","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","renderNotImplemented","LitElement","userStyles","getStyles","_styles","addStyles","reduceRight","unshift","_getUniqueStyles","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","define","loggedIn","atttribute","loggedInStore","picture","givenName","profile","getBasicProfile","getImageUrl","getGivenName","labelsStore","icons","getIcon","INBOX","DRAFT","SENT","SPAM","TRASH","handleLogOut"],"mappings":"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"}